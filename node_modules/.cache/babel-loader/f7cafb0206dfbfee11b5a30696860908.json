{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.experimental = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\n\nconst semver = require(\"semver\");\n\nconst call_credentials_1 = require(\"./call-credentials\");\n\nObject.defineProperty(exports, \"CallCredentials\", {\n  enumerable: true,\n  get: function () {\n    return call_credentials_1.CallCredentials;\n  }\n});\n\nconst channel_1 = require(\"./channel\");\n\nObject.defineProperty(exports, \"connectivityState\", {\n  enumerable: true,\n  get: function () {\n    return channel_1.ConnectivityState;\n  }\n});\nObject.defineProperty(exports, \"Channel\", {\n  enumerable: true,\n  get: function () {\n    return channel_1.ChannelImplementation;\n  }\n});\n\nconst channel_credentials_1 = require(\"./channel-credentials\");\n\nObject.defineProperty(exports, \"ChannelCredentials\", {\n  enumerable: true,\n  get: function () {\n    return channel_credentials_1.ChannelCredentials;\n  }\n});\n\nconst client_1 = require(\"./client\");\n\nObject.defineProperty(exports, \"Client\", {\n  enumerable: true,\n  get: function () {\n    return client_1.Client;\n  }\n});\n\nconst constants_1 = require(\"./constants\");\n\nObject.defineProperty(exports, \"logVerbosity\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.LogVerbosity;\n  }\n});\nObject.defineProperty(exports, \"status\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.Status;\n  }\n});\nObject.defineProperty(exports, \"propagate\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.Propagate;\n  }\n});\n\nconst logging = require(\"./logging\");\n\nconst make_client_1 = require(\"./make-client\");\n\nObject.defineProperty(exports, \"loadPackageDefinition\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.loadPackageDefinition;\n  }\n});\nObject.defineProperty(exports, \"makeClientConstructor\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.makeClientConstructor;\n  }\n});\nObject.defineProperty(exports, \"makeGenericClientConstructor\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.makeClientConstructor;\n  }\n});\n\nconst metadata_1 = require(\"./metadata\");\n\nObject.defineProperty(exports, \"Metadata\", {\n  enumerable: true,\n  get: function () {\n    return metadata_1.Metadata;\n  }\n});\n\nconst server_1 = require(\"./server\");\n\nObject.defineProperty(exports, \"Server\", {\n  enumerable: true,\n  get: function () {\n    return server_1.Server;\n  }\n});\n\nconst server_credentials_1 = require(\"./server-credentials\");\n\nObject.defineProperty(exports, \"ServerCredentials\", {\n  enumerable: true,\n  get: function () {\n    return server_credentials_1.ServerCredentials;\n  }\n});\n\nconst status_builder_1 = require(\"./status-builder\");\n\nObject.defineProperty(exports, \"StatusBuilder\", {\n  enumerable: true,\n  get: function () {\n    return status_builder_1.StatusBuilder;\n  }\n});\n\nconst supportedNodeVersions = require('../../package.json').engines.node;\n\nif (!semver.satisfies(process.version, supportedNodeVersions)) {\n  throw new Error(`@grpc/grpc-js only works on Node ${supportedNodeVersions}`);\n}\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\n\n\nexports.credentials = {\n  /**\n   * Combine a ChannelCredentials with any number of CallCredentials into a\n   * single ChannelCredentials object.\n   * @param channelCredentials The ChannelCredentials object.\n   * @param callCredentials Any number of CallCredentials objects.\n   * @return The resulting ChannelCredentials object.\n   */\n  combineChannelCredentials: (channelCredentials, ...callCredentials) => {\n    return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\n  },\n\n  /**\n   * Combine any number of CallCredentials into a single CallCredentials\n   * object.\n   * @param first The first CallCredentials object.\n   * @param additional Any number of additional CallCredentials objects.\n   * @return The resulting CallCredentials object.\n   */\n  combineCallCredentials: (first, ...additional) => {\n    return additional.reduce((acc, other) => acc.compose(other), first);\n  },\n  // from channel-credentials.ts\n  createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\n  createSsl: channel_credentials_1.ChannelCredentials.createSsl,\n  // from call-credentials.ts\n  createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\n  createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\n  createEmpty: call_credentials_1.CallCredentials.createEmpty\n};\n/**\n * Close a Client object.\n * @param client The client to close.\n */\n\nexports.closeClient = client => client.close();\n\nexports.waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**** Unimplemented function stubs ****/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nexports.loadObject = (value, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\n\nexports.load = (filename, format, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\n\nexports.setLogger = logger => {\n  logging.setLogger(logger);\n};\n\nexports.setLogVerbosity = verbosity => {\n  logging.setLoggerVerbosity(verbosity);\n};\n\nexports.getClientChannel = client => {\n  return client_1.Client.prototype.getChannel.call(client);\n};\n\nvar client_interceptors_1 = require(\"./client-interceptors\");\n\nObject.defineProperty(exports, \"ListenerBuilder\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.ListenerBuilder;\n  }\n});\nObject.defineProperty(exports, \"RequesterBuilder\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.RequesterBuilder;\n  }\n});\nObject.defineProperty(exports, \"InterceptingCall\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.InterceptingCall;\n  }\n});\nObject.defineProperty(exports, \"InterceptorConfigurationError\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.InterceptorConfigurationError;\n  }\n});\n\nconst experimental = require(\"./experimental\");\n\nexports.experimental = experimental;\n\nconst resolver = require(\"./resolver\");\n\nconst load_balancer = require(\"./load-balancer\");\n\n(() => {\n  resolver.registerAll();\n  load_balancer.registerAll();\n})();","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.experimental = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\nconst semver = require(\"semver\");\nconst call_credentials_1 = require(\"./call-credentials\");\nObject.defineProperty(exports, \"CallCredentials\", { enumerable: true, get: function () { return call_credentials_1.CallCredentials; } });\nconst channel_1 = require(\"./channel\");\nObject.defineProperty(exports, \"connectivityState\", { enumerable: true, get: function () { return channel_1.ConnectivityState; } });\nObject.defineProperty(exports, \"Channel\", { enumerable: true, get: function () { return channel_1.ChannelImplementation; } });\nconst channel_credentials_1 = require(\"./channel-credentials\");\nObject.defineProperty(exports, \"ChannelCredentials\", { enumerable: true, get: function () { return channel_credentials_1.ChannelCredentials; } });\nconst client_1 = require(\"./client\");\nObject.defineProperty(exports, \"Client\", { enumerable: true, get: function () { return client_1.Client; } });\nconst constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"logVerbosity\", { enumerable: true, get: function () { return constants_1.LogVerbosity; } });\nObject.defineProperty(exports, \"status\", { enumerable: true, get: function () { return constants_1.Status; } });\nObject.defineProperty(exports, \"propagate\", { enumerable: true, get: function () { return constants_1.Propagate; } });\nconst logging = require(\"./logging\");\nconst make_client_1 = require(\"./make-client\");\nObject.defineProperty(exports, \"loadPackageDefinition\", { enumerable: true, get: function () { return make_client_1.loadPackageDefinition; } });\nObject.defineProperty(exports, \"makeClientConstructor\", { enumerable: true, get: function () { return make_client_1.makeClientConstructor; } });\nObject.defineProperty(exports, \"makeGenericClientConstructor\", { enumerable: true, get: function () { return make_client_1.makeClientConstructor; } });\nconst metadata_1 = require(\"./metadata\");\nObject.defineProperty(exports, \"Metadata\", { enumerable: true, get: function () { return metadata_1.Metadata; } });\nconst server_1 = require(\"./server\");\nObject.defineProperty(exports, \"Server\", { enumerable: true, get: function () { return server_1.Server; } });\nconst server_credentials_1 = require(\"./server-credentials\");\nObject.defineProperty(exports, \"ServerCredentials\", { enumerable: true, get: function () { return server_credentials_1.ServerCredentials; } });\nconst status_builder_1 = require(\"./status-builder\");\nObject.defineProperty(exports, \"StatusBuilder\", { enumerable: true, get: function () { return status_builder_1.StatusBuilder; } });\nconst supportedNodeVersions = require('../../package.json').engines.node;\nif (!semver.satisfies(process.version, supportedNodeVersions)) {\n    throw new Error(`@grpc/grpc-js only works on Node ${supportedNodeVersions}`);\n}\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\nexports.credentials = {\n    /**\n     * Combine a ChannelCredentials with any number of CallCredentials into a\n     * single ChannelCredentials object.\n     * @param channelCredentials The ChannelCredentials object.\n     * @param callCredentials Any number of CallCredentials objects.\n     * @return The resulting ChannelCredentials object.\n     */\n    combineChannelCredentials: (channelCredentials, ...callCredentials) => {\n        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\n    },\n    /**\n     * Combine any number of CallCredentials into a single CallCredentials\n     * object.\n     * @param first The first CallCredentials object.\n     * @param additional Any number of additional CallCredentials objects.\n     * @return The resulting CallCredentials object.\n     */\n    combineCallCredentials: (first, ...additional) => {\n        return additional.reduce((acc, other) => acc.compose(other), first);\n    },\n    // from channel-credentials.ts\n    createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\n    createSsl: channel_credentials_1.ChannelCredentials.createSsl,\n    // from call-credentials.ts\n    createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\n    createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\n    createEmpty: call_credentials_1.CallCredentials.createEmpty,\n};\n/**\n * Close a Client object.\n * @param client The client to close.\n */\nexports.closeClient = (client) => client.close();\nexports.waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\n/* eslint-enable @typescript-eslint/no-explicit-any */\n/**** Unimplemented function stubs ****/\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexports.loadObject = (value, options) => {\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.load = (filename, format, options) => {\n    throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.setLogger = (logger) => {\n    logging.setLogger(logger);\n};\nexports.setLogVerbosity = (verbosity) => {\n    logging.setLoggerVerbosity(verbosity);\n};\nexports.getClientChannel = (client) => {\n    return client_1.Client.prototype.getChannel.call(client);\n};\nvar client_interceptors_1 = require(\"./client-interceptors\");\nObject.defineProperty(exports, \"ListenerBuilder\", { enumerable: true, get: function () { return client_interceptors_1.ListenerBuilder; } });\nObject.defineProperty(exports, \"RequesterBuilder\", { enumerable: true, get: function () { return client_interceptors_1.RequesterBuilder; } });\nObject.defineProperty(exports, \"InterceptingCall\", { enumerable: true, get: function () { return client_interceptors_1.InterceptingCall; } });\nObject.defineProperty(exports, \"InterceptorConfigurationError\", { enumerable: true, get: function () { return client_interceptors_1.InterceptorConfigurationError; } });\nconst experimental = require(\"./experimental\");\nexports.experimental = experimental;\nconst resolver = require(\"./resolver\");\nconst load_balancer = require(\"./load-balancer\");\n(() => {\n    resolver.registerAll();\n    load_balancer.registerAll();\n})();\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}