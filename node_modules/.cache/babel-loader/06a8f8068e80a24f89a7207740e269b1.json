{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emilio Rojas V\\xE9liz\\\\Desktop\\\\facerecognitionapp\\\\src\\\\App2.js\";\nimport React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport { Navigation, Logo, ImageLinkForm, Rank, FaceRecognition } from './Imports';\nimport './App.css';\nimport Clarifai from 'clarifai'; // creating an instanciation of the Clarifai object imported\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: 'fcd3c135178c4f1980cfb9beac698cdd'\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 40,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateArrayOfFacesBox = dataReceived => {\n      const image = document.getElementById('inputImage');\n      const width = Number(image.width);\n      const height = Number(image.height);\n      const arrayOfLocs = dataReceived.outputs[0].data.regions.map(region => {\n        let currentRegion = region.region_info.bounding_box;\n        return {\n          leftCol: currentRegion.left_col * width,\n          topRow: currentRegion.top_row * height,\n          rightCol: width - currentRegion.right_col * width,\n          bottomRow: height - currentRegion.bottom_row * height\n        };\n      });\n      return arrayOfLocs;\n    };\n\n    this.displayFaceBoxes = faceBoxObjectArray => {\n      this.setState({\n        boxes: faceBoxObjectArray\n      });\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = event => {\n      this.setState({\n        imageURL: this.state.input\n      });\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input) //if instead of typing this.state.input I would have typed this.state.imageURL, I would have gotten an error\n      // .then(response => this.displayFaceBox(this.calculateFaceBox(response)))\n      .then(response => this.displayFaceBoxes(this.calculateArrayOfFacesBox(response))).catch(err => console.log(err));\n    };\n\n    this.state = {\n      input: '',\n      imageURL: '',\n      boxes: []\n    };\n  } // this is my solution to the multi face images\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        boxes: this.state.boxes,\n        imageURL: this.state.imageURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 6\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Emilio Rojas VÃ©liz/Desktop/facerecognitionapp/src/App2.js"],"names":["React","Component","Particles","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Clarifai","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","constructor","calculateArrayOfFacesBox","dataReceived","image","document","getElementById","width","Number","height","arrayOfLocs","outputs","data","regions","map","region","currentRegion","region_info","bounding_box","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBoxes","faceBoxObjectArray","setState","boxes","onInputChange","event","input","target","onButtonSubmit","imageURL","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport {Navigation, Logo, ImageLinkForm, Rank, FaceRecognition} from './Imports';\r\nimport './App.css';\r\nimport Clarifai from 'clarifai';\r\n\r\n\r\n// creating an instanciation of the Clarifai object imported\r\nconst app = new Clarifai.App({\r\n apiKey: 'fcd3c135178c4f1980cfb9beac698cdd'\r\n});\r\n\r\n\r\n\r\nconst particlesOptions = {\r\nparticles: {\r\n\tnumber: {\r\n\t\tvalue:40,\r\n\t\tdensity: {\r\n\t\t\tenable:true,\r\n\t\t\tvalue_area: 800\r\n\t\t}\r\n\t}\r\n}\r\n}\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tinput:'',\r\n\t\t\timageURL:'',\r\n\t\t\tboxes: [],\r\n\t\t}\r\n\t}\r\n\r\n\t// this is my solution to the multi face images\r\n\r\n\tcalculateArrayOfFacesBox = (dataReceived) =>{\r\n\t\tconst image = document.getElementById('inputImage');\r\n\t\tconst width = Number(image.width);\r\n\t\tconst height = Number(image.height);\r\n\r\n\t\tconst arrayOfLocs = \r\n\t\t\tdataReceived.outputs[0].data.regions.map(region =>{\r\n\t\t\t\tlet currentRegion = region.region_info.bounding_box;\r\n\t\t\t\treturn {\r\n\t\t\t\t\tleftCol: currentRegion.left_col * width,\r\n\t\t\t\t\ttopRow: currentRegion.top_row *height,\r\n\t\t\t\t\trightCol: width - (currentRegion.right_col * width),\r\n\t\t\t\t\tbottomRow: height - (currentRegion.bottom_row * height)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\treturn arrayOfLocs;\r\n\t}\r\n\r\n\r\n\tdisplayFaceBoxes = (faceBoxObjectArray) => {\r\n\t\tthis.setState({boxes: faceBoxObjectArray});\r\n\t}\r\n\r\n\tonInputChange = (event) => {\r\n\t\tthis.setState({input: event.target.value})\r\n\t}\r\n\r\n\tonButtonSubmit = (event) => {\r\n\t\tthis.setState({imageURL: this.state.input})\r\n\t\tapp.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\r\n\t\t\t//if instead of typing this.state.input I would have typed this.state.imageURL, I would have gotten an error\r\n\t\t\t// .then(response => this.displayFaceBox(this.calculateFaceBox(response)))\r\n\t\t\t.then(response => this.displayFaceBoxes(this.calculateArrayOfFacesBox(response)))\r\n\t\t\t.catch(err => console.log(err));\r\n\t}\r\n\r\n\trender(){\r\n\t  return (\r\n\t    <div className=\"App\">\r\n\t    \t<Particles className='particles' params={particlesOptions}/>\r\n\t    \t<Navigation />\r\n\t\t\t<Logo />\r\n\t\t\t<Rank />\r\n\t    \t<ImageLinkForm \r\n\t    \t\tonInputChange = {this.onInputChange}\r\n\t    \t\tonButtonSubmit = {this.onButtonSubmit}\r\n\t    \t/> \r\n\t    \t<FaceRecognition \r\n\t    \t\tboxes={this.state.boxes} \r\n\t    \t\timageURL={this.state.imageURL}\r\n\t    \t/>\r\n\t    </div>\r\n\t  );\r\n\t }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}