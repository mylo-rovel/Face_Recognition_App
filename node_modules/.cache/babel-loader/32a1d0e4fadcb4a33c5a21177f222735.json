{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emilio Rojas V\\xE9liz\\\\Desktop\\\\facerecognitionapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport { Navigation, Logo, ImageLinkForm, Rank } from './Imports';\nimport './App.css'; // import {ClarifaiStub, grpc} from \"clarifai-nodejs-grpc\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  ClarifaiStub,\n  grpc\n} = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc(); // This will be used by every Clarifai endpoint call.\n\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"fcd3c135178c4f1980cfb9beac698cdd\");\nstub.PostModelOutputs({\n  model_id: \"{THE_MODEL_ID}\",\n  version_id: \"{THE_MODEL_VERSION_ID}\",\n  // This is optional. Defaults to the latest model version.\n  inputs: [{\n    data: {\n      image: {\n        url: \"https://samples.clarifai.com/metro-north.jpg\"\n      }\n    }\n  }]\n}, metadata, (err, response) => {\n  if (err) {\n    throw new Error(err);\n  }\n\n  if (response.status.code !== 10000) {\n    throw new Error(\"Post model outputs failed, status: \" + response.status.description);\n  } // Since we have one input, one output will exist here.\n\n\n  const output = response.outputs[0];\n  console.log(\"Predicted concepts:\");\n\n  for (const concept of output.data.concepts) {\n    console.log(concept.name + \" \" + concept.value);\n  }\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 40,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n\n    this.onButtonSubmit = event => {\n      console.log('button clicked');\n      app.models.predict('fcd3c135178c4f1980cfb9beac698cdd', 'https://samples.clarifai.com/face-det.jpg').then(function (response) {}, function (err) {});\n    };\n\n    this.state = {\n      input: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Particles, {\n        className: \"particles\",\n        params: particlesOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 6\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Emilio Rojas VÃ©liz/Desktop/facerecognitionapp/src/App.js"],"names":["React","Component","Particles","Navigation","Logo","ImageLinkForm","Rank","ClarifaiStub","grpc","require","stub","metadata","Metadata","set","PostModelOutputs","model_id","version_id","inputs","data","image","url","err","response","Error","status","code","description","output","outputs","console","log","concept","concepts","name","value","particlesOptions","particles","number","density","enable","value_area","App","constructor","onInputChange","event","target","onButtonSubmit","app","models","predict","then","state","input","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Particles from 'react-particles-js';\nimport {Navigation, Logo, ImageLinkForm, Rank} from './Imports';\nimport './App.css';\n// import {ClarifaiStub, grpc} from \"clarifai-nodejs-grpc\";\nconst {ClarifaiStub, grpc} = require(\"clarifai-nodejs-grpc\");\n\nconst stub = ClarifaiStub.grpc();\n\n// This will be used by every Clarifai endpoint call.\nconst metadata = new grpc.Metadata();\nmetadata.set(\"authorization\", \"fcd3c135178c4f1980cfb9beac698cdd\");\n\nstub.PostModelOutputs(\n    {\n        model_id: \"{THE_MODEL_ID}\",\n        version_id: \"{THE_MODEL_VERSION_ID}\",  // This is optional. Defaults to the latest model version.\n        inputs: [\n            {data: {image: {url: \"https://samples.clarifai.com/metro-north.jpg\"}}}\n        ]\n    },\n    metadata,\n    (err, response) => {\n        if (err) {\n            throw new Error(err);\n        }\n\n        if (response.status.code !== 10000) {\n            throw new Error(\"Post model outputs failed, status: \" + response.status.description);\n        }\n\n        // Since we have one input, one output will exist here.\n        const output = response.outputs[0];\n\n        console.log(\"Predicted concepts:\");\n        for (const concept of output.data.concepts) {\n            console.log(concept.name + \" \" + concept.value);\n        }\n    }\n);\n\n\n\n\n\nconst particlesOptions = {\nparticles: {\n\tnumber: {\n\t\tvalue:40,\n\t\tdensity: {\n\t\t\tenable:true,\n\t\t\tvalue_area: 800\n\t\t}\n\t}\n}\n}\n\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput:'',\n\t\t}\n\t}\n\n\tonInputChange = (event) => {\n\t\tconsole.log(event.target.value);\n\t}\n\n\tonButtonSubmit = (event) => {\n\t\tconsole.log('button clicked');\n\t\tapp.models.predict(\n\t\t\t'fcd3c135178c4f1980cfb9beac698cdd',\n\t\t\t'https://samples.clarifai.com/face-det.jpg').then(\n\t\t\t\tfunction(response) {\n\n\t\t\t\t},\n\t\t\t\tfunction(err){\n\n\t\t\t\t}\n\t\t\t);\n\t}\n\n\trender(){\n\t  return (\n\t    <div className=\"App\">\n\t    \t<Particles className='particles' params={particlesOptions}/>\n\t    \t<Navigation />\n\t\t\t<Logo />\n\t\t\t<Rank />\n\t    \t<ImageLinkForm \n\t    \t\tonInputChange = {this.onInputChange}\n\t    \t\tonButtonSubmit = {this.onButtonSubmit}\n\t    \t/>\n\t\t\t{/*   \n\t    \t<FaceRecognition /> */}\n\t    </div>\n\t  );\n\t }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}